generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model automations {
  id              String        @id
  name            String
  description     String?
  config          Json?
  active          Boolean       @default(true)
  organization_id Int
  created_at      DateTime      @default(now())
  updated_at      DateTime
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model chat_messages {
  id            Int           @id @default(autoincrement())
  session_id    Int
  message_type  String        @db.VarChar(20)
  content       String
  metadata      Json?
  timestamp     DateTime?     @default(now()) @db.Timestamptz(6)
  position      Int?
  user_id       Int?
  updated_at    DateTime?     @default(now()) @db.Timestamptz(6)
  chat_sessions chat_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "idx_chat_messages_session_id")
}

model chat_sessions {
  id              Int             @id @default(autoincrement())
  user_id         Int
  organization_id Int?
  dashboard_id    String?         @db.VarChar(255)
  title           String          @db.VarChar(255)
  last_message    String?
  message_count   Int?            @default(0)
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @default(now()) @db.Timestamptz(6)
  is_active       Boolean?        @default(true)
  metadata        Json?           @default("{}")
  chat_messages   chat_messages[]
  organizations   organizations?  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([organization_id], map: "idx_chat_sessions_org_id")
  @@index([user_id], map: "idx_chat_sessions_user_id")
}

model conversation_participants {
  id              Int           @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([conversation_id, user_id])
}

model conversations {
  id                        Int                         @id @default(autoincrement())
  title                     String                      @db.VarChar(255)
  created_by                Int
  organization_id           Int
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  conversation_participants conversation_participants[]
  users                     users                       @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations             organizations               @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages                  messages[]
}

model dashboard_widgets {
  id           Int        @id @default(autoincrement())
  dashboard_id Int
  widget_type  String
  title        String?
  size         String?
  settings     Json?      @default("{}")
  position     Json?
  created_at   DateTime   @default(now())
  updated_at   DateTime
  dashboards   dashboards @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)
}

model dashboards {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  team              String?
  category          String?
  created_by        Int?
  organization_id   Int
  created_at        DateTime            @default(now())
  updated_at        DateTime
  dashboard_widgets dashboard_widgets[]
  users             users?              @relation(fields: [created_by], references: [id])
  organizations     organizations       @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  metrics           metrics[]
}

model data_sources {
  id              Int               @id @default(autoincrement())
  name            String
  type            String
  config          Json?
  status          String
  created_at      DateTime          @default(now())
  updated_at      DateTime
  creator_id      Int
  workspace_id    Int
  users           users             @relation(fields: [creator_id], references: [id])
  organizations   organizations     @relation(fields: [workspace_id], references: [id])
  document_chunks document_chunks[]
  processing_jobs processing_jobs[]
}

model document_chunks {
  id             String       @id
  data_source_id Int
  content        String
  embedding      Json?
  metadata       Json?
  created_at     DateTime     @default(now())
  updated_at     DateTime
  data_sources   data_sources @relation(fields: [data_source_id], references: [id], onDelete: Cascade)

  @@index([data_source_id])
}

model files {
  id                String         @id
  filename          String
  original_filename String
  file_type         String
  mime_type         String
  size              BigInt
  metadata          Json?
  uploaded_by       String?
  organization_id   Int?
  created_at        DateTime       @default(now())
  updated_at        DateTime
  error             String?
  content           Bytes?
  organizations     organizations? @relation(fields: [organization_id], references: [id])
}

model messages {
  id              Int           @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  content         String
  role            String        @default("user") @db.VarChar(50)
  metadata        Json?         @default("{}")
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model metrics {
  id           Int        @id @default(autoincrement())
  dashboard_id Int
  title        String
  value        String?
  type         String?
  timeframe    String?
  trend        Json?
  created_at   DateTime   @default(now())
  updated_at   DateTime
  dashboards   dashboards @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)
}

model organization_members {
  user_id         Int
  organization_id Int
  joined_at       DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, organization_id])
}

model organizations {
  id                   Int                    @id @default(autoincrement())
  name                 String
  created_at           DateTime               @default(now())
  updated_at           DateTime
  logo_url             String?
  automations          automations[]
  chat_sessions        chat_sessions[]
  conversations        conversations[]
  dashboards           dashboards[]
  data_sources         data_sources[]
  files                files[]
  organization_members organization_members[]
  workspaces           workspaces[]
}

model processing_jobs {
  id             String       @id
  data_source_id Int
  status         String
  file_name      String?
  s3_key         String?
  metadata       Json?
  content        String?
  file_type      String?
  progress       Float?
  error          String?
  created_at     DateTime     @default(now())
  updated_at     DateTime
  completed_at   DateTime?
  data_sources   data_sources @relation(fields: [data_source_id], references: [id], onDelete: Cascade)
}

model users {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique
  hashed_password           String?
  name                      String?
  role                      Role                        @default(USER)
  created_at                DateTime                    @default(now())
  updated_at                DateTime
  conversation_participants conversation_participants[]
  conversations             conversations[]
  dashboards                dashboards[]
  data_sources              data_sources[]
  messages                  messages[]
  organization_members      organization_members[]
  workspaces                workspaces[]
}

model workspaces {
  id              Int            @id @default(autoincrement())
  name            String         @db.VarChar(255)
  description     String?
  user_id         Int?
  organization_id Int?
  is_shared       Boolean?       @default(false)
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([organization_id], map: "idx_workspaces_org_id")
  @@index([user_id], map: "idx_workspaces_user_id")
}

enum Role {
  USER
  ADMIN
}
